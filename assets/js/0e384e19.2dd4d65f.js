"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[976],{7879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"intro","title":"Description","description":"The view std::transform_view ()","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/transform_view/docs/intro","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"API","permalink":"/transform_view/docs/category/api"}}');var s=n(4848),r=n(8453);const o={sidebar_position:1},c="Description",d={},a=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components},{Paper:n,Stdref:i}=t;return n||u("Paper",!0),i||u("Stdref",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"description",children:"Description"})}),"\n",(0,s.jsxs)(t.p,{children:["The view ",(0,s.jsx)(t.code,{children:"std::ranges::transform_view"})," (",(0,s.jsx)(i,{ref:"range.transform"}),")\nintroduced with C++20 is unconditionally a non-borrowed range (see ",(0,s.jsx)(i,{ref:"range.range"}),").  ",(0,s.jsx)(n,{num:"P3117"})," was written to address this,\nmaking ",(0,s.jsx)(t.code,{children:"transform_view"})," conditionally borrowable."]}),"\n",(0,s.jsxs)(t.p,{children:["The condition for its borrowability is that the callable ",(0,s.jsx)(t.code,{children:"F"})," given to\n",(0,s.jsx)(t.code,{children:"std::ranges::transform_view"}),' must have properties that allow its trivial\nconstruction and destruction, on-demand.  The paper calls this property being\n"tidy".  This is the exposition-only concept that determines tidiness:']}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"template<class F>\n  constexpr bool tidy-func =\n    is_empty_v<F> && is_trivially_default_constructible_v<F> && is_trivially_destructible_v<F>;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Recent versions of Clang do not seem to implement\n",(0,s.jsx)(t.code,{children:"is_trivially_default_constructible"}),", so this is the actual version of\n",(0,s.jsx)(t.code,{children:"tidy-func"})," used in this implementation:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",metastring:"tidy_func",children:"template <class F>\nconstexpr bool tidy_func = std::is_empty_v<F> &&\n#if defined(__apple_build_version__)\n                           std::is_default_constructible_v<F> &&\n#else\n                           std::is_trivially_constructible_v<F> &&\n#endif\n                           std::is_trivially_destructible_v<F>;\n"})}),"\n",(0,s.jsx)(t.h1,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.p,{children:["To use the revised version of ",(0,s.jsx)(t.code,{children:"transform_view"}),", simply use it as you would\n",(0,s.jsx)(t.code,{children:"std::ranges::transform_view"}),".  If the template parameter ",(0,s.jsx)(t.code,{children:"F"}),' you use is\n"tidy", your ',(0,s.jsx)(t.code,{children:"transform_view"})," will be a borrowed range."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}function u(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var i=n(6540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);